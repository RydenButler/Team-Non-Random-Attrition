summary(ord_logit_model)
cont_self <- t.test(data$handling[data$treatment=="control"],
data$handling[data$treatment=="self"])
cont_self
diff_control <- c(cont_self$estimate[2]-cont_self$estimate[1],
cont_appointee$estimate[2]-cont_appointee$estimate[1],
cont_expert$estimate[2]-cont_expert$estimate[1])
cont_appointee <- t.test(data$handling[data$treatment=="control"],
data$handling[data$treatment=="appointee"])
cont_expert <- t.test(data$handling[data$treatment=="control"],
data$handling[data$treatment=="expert"])
self_appointee <- t.test(data$handling[data$treatment=="self"],
data$handling[data$treatment=="appointee"])
self_expert <- t.test(data$handling[data$treatment=="self"],
data$handling[data$treatment=="expert"])
appointee_expert <- t.test(data$handling[data$treatment=="appointee"],
data$handling[data$treatment=="expert"])
diff_control <- c(cont_self$estimate[2]-cont_self$estimate[1],
cont_appointee$estimate[2]-cont_appointee$estimate[1],
cont_expert$estimate[2]-cont_expert$estimate[1])
diff_control
cont_appointee
cont_expert
diff_self
diff_self <- c(cont_self$estimate[2]-cont_self$estimate[1],
self_appointee$estimate[1]-self_appointee$estimate[2],
self_expert$estimate[1]-self_expert$estimate[2])
diff_self
self_appointee
self_expert
appointee_expert
self_expert
appointee_expert
0.1075269 - 0.0990566
## approval recode
appRecode <- function(x){
tmp <- recode(x,"'Very positive'=4;'Somewhat positive'=3;'Somewhat negative'=2;'Very negative'=1")
return(as.numeric(tmp))
}
data$handling <- rep(0, nrow(data))
data$handling_factor <- data[,35]
data$handling <- appRecode(data[,35])
cont <- t.test(data$handling[data$treatment=="control"])
self <- t.test(data$handling[data$treatment=="self"])
appointee <- t.test(data$handling[data$treatment=="appointee"])
expert <- t.test(data$handling[data$treatment=="expert"])
condition_means <- c(cont$estimate, self$estimate, appointee$estimate, expert$estimate)
condition_conf_int <- list(cont$conf.int, self$conf.int, appointee$conf.int, expert$conf.int)
cont_self <- t.test(data$handling[data$treatment=="control"],
data$handling[data$treatment=="self"])
cont_appointee <- t.test(data$handling[data$treatment=="control"],
data$handling[data$treatment=="appointee"])
cont_expert <- t.test(data$handling[data$treatment=="control"],
data$handling[data$treatment=="expert"])
self_appointee <- t.test(data$handling[data$treatment=="self"],
data$handling[data$treatment=="appointee"])
self_expert <- t.test(data$handling[data$treatment=="self"],
data$handling[data$treatment=="expert"])
appointee_expert <- t.test(data$handling[data$treatment=="appointee"],
data$handling[data$treatment=="expert"])
diff_control <- c(cont_self$estimate[2]-cont_self$estimate[1],
cont_appointee$estimate[2]-cont_appointee$estimate[1],
cont_expert$estimate[2]-cont_expert$estimate[1])
diff_self <- c(cont_self$estimate[2]-cont_self$estimate[1],
self_appointee$estimate[1]-self_appointee$estimate[2],
self_expert$estimate[1]-self_expert$estimate[2])
diff_control
data$handling[data$treatment=="appointee"]
data$handling[data$treatment=="expert"]
data$handling[data$treatment=="self"]
diff_control
cont_self
cont_appointee
cont_expert
diff_self
self_appointee
self_expert
appointee_expert
1.623656 - 1.580189
cont <- t.test(data$resign[data$treatment=="control"])
self <- t.test(data$resign[data$treatment=="self"])
appointee <- t.test(data$resign[data$treatment=="appointee"])
expert <- t.test(data$resign[data$treatment=="expert"])
condition_means <- c(cont$estimate, self$estimate, appointee$estimate, expert$estimate)
condition_conf_int <- list(cont$conf.int, self$conf.int, appointee$conf.int, expert$conf.int)
cont_self <- t.test(data$resign[data$treatment=="control"],
data$resign[data$treatment=="self"])
cont_appointee <- t.test(data$resign[data$treatment=="control"],
data$resign[data$treatment=="appointee"])
cont_expert <- t.test(data$resign[data$treatment=="control"],
data$resign[data$treatment=="expert"])
self_appointee <- t.test(data$resign[data$treatment=="self"],
data$resign[data$treatment=="appointee"])
self_expert <- t.test(data$resign[data$treatment=="self"],
data$resign[data$treatment=="expert"])
appointee_expert <- t.test(data$resign[data$treatment=="appointee"],
data$resign[data$treatment=="expert"])
diff_control <- c(cont_self$estimate[2]-cont_self$estimate[1],
cont_appointee$estimate[2]-cont_appointee$estimate[1],
cont_expert$estimate[2]-cont_expert$estimate[1])
diff_self <- c(cont_self$estimate[2]-cont_self$estimate[1],
self_appointee$estimate[1]-self_appointee$estimate[2],
self_expert$estimate[1]-self_expert$estimate[2])
diff_control
diff_self
appointee_expert
0.5483871 - 0.6037736
self_expert
self_appointee
cont_expert
cont_appointee
cont_self
data$resign
logit_model_resign <- glm(resign ~ treatment, data = data, family = binomial(link = "logit"))
summary(logit_model_resign)
texreg(extract(logit_model_resign))
library(devtools)
library(roxygen2)
library(MASS)
# DO NOT RUN THE FOLLOWING LINE
#### package.skeleton('estimateDelta')
# Compile latest package and re-documents
Current <- as.package('attritR')
load_all(Current)
document(Current)
setwd("~/GitHub/Team-Non-Random-Attrition")
library(devtools)
library(roxygen2)
library(MASS)
# DO NOT RUN THE FOLLOWING LINE
#### package.skeleton('estimateDelta')
# Compile latest package and re-documents
Current <- as.package('attritR')
load_all(Current)
document(Current)
### Check Proposition 4:
simulateData <- function(N = 1000,
treatmentEffectR = c(-2,2),
covariateEffectR = 1,
instrumentEffectR = 1,
treatmentEffectY = 1,
covariateEffectY = 1,
interactionEffectY = .25
){
X <- runif(n = N, min = -1, max = 1)
Z <- runif(n = N, min = -1, max = 2)
D <- rbinom(n = N, size = 1, prob = 0.5)
# For attrition on unobservables
UV <- mvrnorm(n = N, mu = c(0,0), Sigma = matrix(c(1, 0.8, 0.8, 1), nrow = 2))
U <- UV[ , 1]
V <- UV[ , 2]
# Counterfactual treatment effects
YTreatment <- treatmentEffectY + covariateEffectY*X + interactionEffectY*D*X + U
YControl <-  covariateEffectY*X + U
# Counterfactual ATE | All
ATE <- mean(YTreatment) - mean(YControl)
Sims <- lapply(seq(treatmentEffectR[1], treatmentEffectR[2], 0.1), function(currentR) {
# Realized treatment effects and attrition
Y <- treatmentEffectY*D + covariateEffectY*X + interactionEffectY*D*X + U
R <- currentR*D + covariateEffectR*X + instrumentEffectR*Z + V > 0
Y[!R] <- NA
# Combines realized data
SimData <- data.frame(Y, D, X, Z)
# ATE | Response
ATR <- mean(Y[R & D]) - mean(Y[R & !D])
return(list(ATR = ATR, SimData = SimData))
}
)
ATR <- unlist(lapply(Sims, function(sim) sim$ATR))
SimData <- lapply(Sims, function(sim) sim$SimData)
return(list(ATE = ATE, ATR = ATR, SimData = SimData))
}
ObsData <- simulateData()$SimData[[1]]
# weights
Weights <- calculateWeights(modelData = ObsData[,1:3],
instrumentData = ObsData[ , 4])
# delta
Delta <- estimateDelta(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData)
# bootstrap
Boot <- bootstrapDelta(Y ~ D,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Boot$MeanEst
# Check props 4 and 5
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
ATE(Y ~ D,
~ Z,
ObsData,
'Both',
nCores = 4)
)
format('          ', 'Mean ','Median','SE  ',
paste0('lower',' ',signif(as.numeric(substr(quantiles[1],3,4))),'%'),
paste0('upper',' ',signif(as.numeric(substr(quantiles[2],3,4))),'%'))
quantiles <- c(0.05,0.95)
format('          ', 'Mean ','Median','SE  ',
paste0('lower',' ',signif(as.numeric(substr(quantiles[1],3,4))),'%'),
paste0('upper',' ',signif(as.numeric(substr(quantiles[2],3,4))),'%'))
format(cat('          ', 'Mean ','Median','SE  ',
paste0('lower',' ',signif(as.numeric(substr(quantiles[1],3,4))),'%'),
paste0('upper',' ',signif(as.numeric(substr(quantiles[2],3,4))),'%')))
ObsData
print(ObsData)
library(devtools)
library(roxygen2)
library(MASS)
# DO NOT RUN THE FOLLOWING LINE
#### package.skeleton('estimateDelta')
# Compile latest package and re-documents
Current <- as.package('attritR')
load_all(Current)
document(Current)
### Check Proposition 4:
simulateData <- function(N = 1000,
treatmentEffectR = c(-2,2),
covariateEffectR = 1,
instrumentEffectR = 1,
treatmentEffectY = 1,
covariateEffectY = 1,
interactionEffectY = .25
){
X <- runif(n = N, min = -1, max = 1)
Z <- runif(n = N, min = -1, max = 2)
D <- rbinom(n = N, size = 1, prob = 0.5)
# For attrition on unobservables
UV <- mvrnorm(n = N, mu = c(0,0), Sigma = matrix(c(1, 0.8, 0.8, 1), nrow = 2))
U <- UV[ , 1]
V <- UV[ , 2]
# Counterfactual treatment effects
YTreatment <- treatmentEffectY + covariateEffectY*X + interactionEffectY*D*X + U
YControl <-  covariateEffectY*X + U
# Counterfactual ATE | All
ATE <- mean(YTreatment) - mean(YControl)
Sims <- lapply(seq(treatmentEffectR[1], treatmentEffectR[2], 0.1), function(currentR) {
# Realized treatment effects and attrition
Y <- treatmentEffectY*D + covariateEffectY*X + interactionEffectY*D*X + U
R <- currentR*D + covariateEffectR*X + instrumentEffectR*Z + V > 0
Y[!R] <- NA
# Combines realized data
SimData <- data.frame(Y, D, X, Z)
# ATE | Response
ATR <- mean(Y[R & D]) - mean(Y[R & !D])
return(list(ATR = ATR, SimData = SimData))
}
)
ATR <- unlist(lapply(Sims, function(sim) sim$ATR))
SimData <- lapply(Sims, function(sim) sim$SimData)
return(list(ATE = ATE, ATR = ATR, SimData = SimData))
}
ObsData <- simulateData()$SimData[[1]]
# weights
Weights <- calculateWeights(modelData = ObsData[,1:3],
instrumentData = ObsData[ , 4])
# delta
Delta <- estimateDelta(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData)
# bootstrap
Boot <- bootstrapDelta(Y ~ D,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Boot$MeanEst
# Check props 4 and 5
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
ATE(Y ~ D,
~ Z,
ObsData,
'Both',
nCores = 4)
regressionFormula <- "Y ~ D + X"
instrumentFormula = ~ Z
# Compile latest package and re-documents
Current <- as.package('attritR')
load_all(Current)
document(Current)
simulateData <- function(N = 1000,
treatmentEffectR = c(-2,2),
covariateEffectR = 1,
instrumentEffectR = 1,
treatmentEffectY = 1,
covariateEffectY = 1,
interactionEffectY = .25
){
X <- runif(n = N, min = -1, max = 1)
Z <- runif(n = N, min = -1, max = 2)
D <- rbinom(n = N, size = 1, prob = 0.5)
# For attrition on unobservables
UV <- mvrnorm(n = N, mu = c(0,0), Sigma = matrix(c(1, 0.8, 0.8, 1), nrow = 2))
U <- UV[ , 1]
V <- UV[ , 2]
# Counterfactual treatment effects
YTreatment <- treatmentEffectY + covariateEffectY*X + interactionEffectY*D*X + U
YControl <-  covariateEffectY*X + U
# Counterfactual ATE | All
ATE <- mean(YTreatment) - mean(YControl)
Sims <- lapply(seq(treatmentEffectR[1], treatmentEffectR[2], 0.1), function(currentR) {
# Realized treatment effects and attrition
Y <- treatmentEffectY*D + covariateEffectY*X + interactionEffectY*D*X + U
R <- currentR*D + covariateEffectR*X + instrumentEffectR*Z + V > 0
Y[!R] <- NA
# Combines realized data
SimData <- data.frame(Y, D, X, Z)
# ATE | Response
ATR <- mean(Y[R & D]) - mean(Y[R & !D])
return(list(ATR = ATR, SimData = SimData))
}
)
ATR <- unlist(lapply(Sims, function(sim) sim$ATR))
SimData <- lapply(Sims, function(sim) sim$SimData)
return(list(ATE = ATE, ATR = ATR, SimData = SimData))
}
ObsData <- simulateData()$SimData[[1]]
# weights
Weights <- calculateWeights(modelData = ObsData[,1:3],
instrumentData = ObsData[ , 4])
# delta
Delta <- estimateDelta(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData)
# bootstrap
Boot <- bootstrapDelta(Y ~ D,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Boot$MeanEst
# Check props 4 and 5
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Population',
nCores = 4)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Population',
nCores = 4)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Population',
nCores = 4)
# Check props 4 and 5
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Population',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4, nBoots = 50)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4, nBoots = 50)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4, nBoots = 50)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Population',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Population',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4, nBoots = 50)
Current <- as.package('attritR')
load_all(Current)
document(Current)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Both',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Population',
nCores = 4, nBoots = 50)
Result <- ATE(Y ~ D + X,
instrumentFormula = ~ Z,
data = ObsData,
effectType = 'Respondent',
nCores = 4, nBoots = 50)
